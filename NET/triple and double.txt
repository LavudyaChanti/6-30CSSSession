Triple Equals:
============
When using triple equals === in JavaScript, we are testing for strict equality. 
This means both the type and the value we are comparing have to be the same.

Case1:
In this first example we’re comparing the number 5 with the number 5. 
As expected, true is returned. Both are numbers, and both share the same value of 5.

	5 === 5				//true
	'hello world' === 'hello world'		// true (Both Strings, equal values)
	true === true			// true (Both Booleans, equal values)
	
Case2:
In this example we’ll compare the number 77 to the string value of 77. 
This means our operands will have the same value, but a different type. This will return false

	77 === '77'			// false (Number v. String)
	'cat' === 'dog'			// false (Both are Strings, but have different values)
	false === 0			// false (Different type and different value)

Double equals:
=============
When using double equals in JavaScript we are testing for loose equality. 
Double equals also performs type coercion.
Type coercion means that two values are compared only after attempting to convert them into a common type.


	77 == '77'		// true

	false == 0		// true

Conclusion:
---------------
The == operator will compare for equality after doing any necessary type conversions. 
The === operator will not do the conversion, so if two values are not the same type === will simply return false.












